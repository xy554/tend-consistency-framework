tend:
  consistency:
    parallel:
      pool:
        thread-max-pool-size: 6
        thread-core-pool-size: 6
        thread-pool-keep-alive-time: 60
        thread-pool-keep-alive-time-unit: SECONDS
        thread-pool-queue-size: 100
        # 框架自身有默认的实现类，来扫描查询任务的开始时间以及结束时间，如果不满足需求，可自定义实现类，这里给出了实例
        task-schedule-time-range-class-name: com..eshop.range.MyTaskTimeRangeQuery
    action:
      fail-count-threshold: 0
    shard:
      task-sharded: true
      # 自定义的任务分片键实现类，如果不定义使用框架默认的实现
      sharding-key-generator-class-name: com..eshop.shard.MySnowflakeShardingKeyGenerator

spring:
  main:
    allow-bean-definition-overriding: true
  shardingsphere:
    datasource:
      # 数据源名称
      names: ds0,ds1
      ds0:
        jdbc-url: jdbc:mysql://localhost:3306/consistency_task0?characterEncoding=utf8&characterSetResults=utf8&autoReconnect=true&failOverReadOnly=false&useSSL=false
        username: root
        password: rootroot
        driver-class-name: com.mysql.cj.jdbc.Driver
        type: com.zaxxer.hikari.HikariDataSource
        hikari:
          connection-timeout: 3000
      ds1:
        jdbc-url: jdbc:mysql://localhost:3306/consistency_task1?characterEncoding=utf8&characterSetResults=utf8&autoReconnect=true&failOverReadOnly=false&useSSL=false
        driver-class-name: com.mysql.cj.jdbc.Driver
        username: root
        password: rootroot
        type: com.zaxxer.hikari.HikariDataSource
        hikari:
          connection-timeout: 3000
    props:
      sql:
        show: true
    sharding:
      tables:
        # 最终一致性任务库分库策略
        tend_consistency_task:
          # 数据分布情况
          actual-data-nodes: ds$->{0..1}.tend_consistency_task
          # order库分库策略
          database-strategy:
            inline:
              sharding-column: shard_key
              algorithm-expression: ds$->{shard_key % 2}
